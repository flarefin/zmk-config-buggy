#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Homerow Mods
#define hrml(k1,k2,k3,k4) &ht LCTRL k1  &ht LALT k2  &ht LSHFT k3  &ht LCMD k4
#define hrmr(k1,k2,k3,k4) &ht RCMD k1  &ht RSHFT k2  &ht RALT k3  &ht RCTRL k4


//        0  1  2     3  4  5
//     6  7  8  9     10 11 12 13

//           14 15    16 17


/ {
    combos {
        compatible = "zmk,combos";
// a1
        rlcombo {
            timeout-ms = <20>;
            key-positions = <7 0>;
            bindings = <&rlmacro>;
            layers = <0>;
        };
        tdcombo {
            timeout-ms = <20>;
            key-positions = <8 1>;
            bindings = <&tdmacro>;
            layers = <0>;
        };
        yscombo {
            timeout-ms = <20>;
            key-positions = <9 2>;
            bindings = <&ysmacro>;
            layers = <0>;
        };
        hmcombo {
            timeout-ms = <20>;
            key-positions = <10 3>;
            bindings = <&hmmacro>;
            layers = <0>;
        };
        oacombo {
            timeout-ms = <20>;
            key-positions = <11 4>;
            bindings = <&oamacro>;
            layers = <0>;
        };
        uicombo {
            timeout-ms = <20>;
            key-positions = <12 5>;
            bindings = <&uimacro>;
            layers = <0>;
        };
// a2
        ckcombo {
            timeout-ms = <20>;
            key-positions = <9 2>;
            bindings = <&ckmacro>;
            layers = <1>;
        };
        ffcombo {
            timeout-ms = <20>;
            key-positions = <10 3>;
            bindings = <&ffmacro>;
            layers = <1>;
        };
        quicombo {
            timeout-ms = <20>;
            key-positions = <11 4>;
            bindings = <&quimacro>;
            layers = <1>;
        };
        ellicombo {
            timeout-ms = <20>;
            key-positions = <12 5>;
            bindings = <&ellimacro>;
            layers = <1>;
        };

    };

    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
        a2macro: a2macro {
		    compatible = "zmk,behavior-macro";
		    label = "a2macro";
	    	#binding-cells = <0>;
	    	bindings = <&sl 1>;
        };
// a1
        rlmacro: rlmacro {
            compatible = "zmk,behavior-macro";
            label = "rlmacro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings = <&kp R &kp L>;
        };
        tdmacro: tdmacro {
            compatible = "zmk,behavior-macro";
            label = "tdmacro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings = <&kp T &kp D>;
        };
        ysmacro: ysmacro {
            compatible = "zmk,behavior-macro";
            label = "ysmacro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings = <&kp Y &kp S>;
        };
        hmmacro: hmmacro {
            compatible = "zmk,behavior-macro";
            label = "hmmacro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings = <&kp H &kp M>;
        };
        oamacro: oamacro {
            compatible = "zmk,behavior-macro";
            label = "oamacro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings = <&kp O &kp A>;
        };
        uimacro: uimacro {
            compatible = "zmk,behavior-macro";
            label = "uimacro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings = <&kp U &kp I>;
        };
// a2
        ckmacro: ckmacro {
            compatible = "zmk,behavior-macro";
            label = "ckmacro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings = <&kp C &kp K>;
        };
        ffmacro: ffmacro {
            compatible = "zmk,behavior-macro";
            label = "ffmacro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings = <&kp F &kp F>;
        };
        quimacro: quimacro {
            compatible = "zmk,behavior-macro";
            label = "quimacro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings = <&kp Q &kp U &kp I>;
        };
        ellimacro: ellimacro {
            compatible = "zmk,behavior-macro";
            label = "ellimacro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings = <&kp DOT &kp DOT &kp DOT>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        alpha1 { // 0
            bindings = <
                            &kp L       &kp D       &kp Y               &kp M       &kp O       &kp U
               hrml(N,          R,          T,          S)             hrmr(H,          A,          I,          E)

                                        &kp SPACE   &mo 3               &mo 2       &a2macro
            >;
        };

        alpha2 { // 1
            bindings = <
                            &kp X       &kp V       &kp G               &kp K       &kp Q       &kp COMMA
                &kp P       &kp W       &kp B       &kp C               &kp F       &kp Z       &kp DOT     &kp J

                                        &kp SPACE   &mo 3               &mo 2       &to 0
            >;
        };

        symbol1 { // 2
            bindings = <
                            &kp BSLH    &kp FSLH    &kp TILDE           &kp UNDER   &kp DQT     &kp SEMI
                &kp BSPC    &kp EXCL    &kp QMARK   &kp GRAVE           &kp MINUS   &kp SQT     &kp COLON   &kp AT

                                        &kp SPACE   &none               &none       &none
            >;
        };

        system1 { // 3
            bindings = <
                            &kp LG(C)   &kp UP      &kp LG(V)           &none       &none       &kp TAB
                &kp ESC     &kp LEFT    &kp DOWN    &kp RIGHT           &kp LC(LEFT) &none      &kp LC(RIGHT) &kp RET

                                        &none       &none               &to 4       &none
            >;
        };

        bt_layer { // 4
            bindings = <
                            &none       &none       &none               &none       &none       &none
                &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR       &none       &none       &none       &none

                                        &none       &none               &to 0       &none
            >;
        };
    };
};
